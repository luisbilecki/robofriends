{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions/index.js","constants/index.js","reducers/robots.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","combineReducers","action","Object","assign","middlewares","thunkMiddleware","store","createStore","rootReducer","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f712bef.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => (\n                    <Card \n                        key={i}\n                        id={user.id} \n                        name={user.name} \n                        email={user.email} \n                    />\n                ))\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasError: false,\n        };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n    \n    render() {\n        return this.state.hasError ?\n            <h1>Oooops. That is not good</h1> :\n            this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions';\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {   \n        const { searchField, onSearchChange, robots, isPending } = this.props;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n\n        return isPending ?\n            (\n                <div className='tc'>\n                    <h1>Loading</h1>\n                </div>\n            ) :        \n            (\n                <div className='tc'>\n                    <h1 className='f2'>RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );        \n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {        \n        onSearchChange: event => dispatch(\n            setSearchField(event.target.value)\n        ),\n        onRequestRobots: () => dispatch(requestRobots()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from '../constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });   \n     \n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: data,\n        }))\n        .catch(error => dispatch({\n            type: REQUEST_ROBOTS_FAILED,\n            payload: error,\n        }));\n};","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n} from '../constants';\n\nconst initialStateSearch = {\n    searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { \n                robots: action.payload,\n                isPending: false \n            });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { \n                error: action.payload,\n                isPending: false \n            });\n        default:\n            return state;\n    }\n};","import { combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './robots';\n\nexport default combineReducers({\n    searchRobots,\n    requestRobots,\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst middlewares = [\n    thunkMiddleware,\n];\n\n// Logger middleware\nif (process.env.NODE_ENV === 'development') {\n    const { createLogger } = require('redux-logger');\n    const logger = createLogger();\n \n    middlewares.push(logger);\n}\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(...middlewares),\n);\n\nexport default store;\n\n/*\nconst middlewares = [];\n \n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './containers/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}